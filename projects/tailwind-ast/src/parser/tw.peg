@export
TwParser = {statements:TwStatementNode} $;

@export
TwFraction = lhs:IntegerNode '/' rhs:IntegerNode $;


TwStatementNode =
	@:GroupNode     |
	@:ArbitraryNode |
	@:InstructNode  ;

GroupNode     = [variant:VariantNode] element:ElementNode [Hyphen] '(' {statements:TwStatementNode} ')' [important:Important];
ArbitraryNode = [variant:VariantNode] element:ElementNode [Hyphen] '[' item:ArbitraryItem ']' [important:Important];
InstructNode  = [variant:VariantNode] element:ElementNode [important:Important];


VariantNode = {items:VariantItemNode};

VariantItemNode = [not:Not Hyphen] element:ElementNode pseudo:Pseudo;

ElementNode = [negative:Hyphen] identifiers:IdentifierNode {Hyphen identifiers:IdentifierNode} | zelf: SelfRef;

ArbitraryItem =
	@:StringNode       |
	@:ArbitraryBalance ;

@extern(crate::eat_arbitrary)
ArbitraryBalance;

@no_skip_ws
StringNode =
	"'" {!"'" item:StringItem} "'" |
	'"' {!'"' item:StringItem} '"' ;

StringItem =
	@:Escaped |
	@:Any ;

Escaped = '\\' any:char;

@char
Any = char;

@string
Pseudo = '::' | ':';

Hyphen = '-';

Important = '!';

SelfRef = '&';

Not = 'not';

@string
@no_skip_ws
IntegerNode = {'0'..'9'};

@extern(crate::eat_css_class)
IdentifierNode;


Dot = '.' | '。';


Split = ';' | ',' | '，';